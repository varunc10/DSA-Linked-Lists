/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode* temp=new ListNode();
        ListNode* curr=temp;
        ListNode* newHead=temp;
        //vector<int> v;
        ListNode* newl= new ListNode();
        ListNode* curr1=list1;
        ListNode* curr2=list2;
        if(list1==NULL&&list2==NULL){
            return NULL;
        }
        while(curr1!=NULL&&curr2!=NULL){
            if(curr1->val<curr2->val){
                //v.push_back(curr1->val);
                temp=new ListNode(curr1->val);
                curr->next=temp;
                curr=curr->next;
                curr1=curr1->next;
                
            }
            else{
                //v.push_back(curr2->val);
                temp=new ListNode(curr2->val);
                curr->next=temp;
                curr=curr->next;
                curr2=curr2->next;
                
            }
        }
        while(curr1!=NULL){
            //v.push_back(curr1->val);
            temp=new ListNode(curr1->val);
            curr->next=temp;
            curr=curr->next;
            curr1=curr1->next;
        }
        while(curr2!=NULL){
            //v.push_back(curr2->val);
            temp=new ListNode(curr2->val);
            curr->next=temp;
            curr=curr->next;
            curr2=curr2->next;
            
        }
        ListNode* head2=newHead->next;
        delete newHead;
        /*ListNode* temp=new ListNode(v[0]);
        ListNode* curr=temp;
        ListNode* newHead=temp;
        for(int i=1;i<v.size();i++){
            temp=new ListNode(v[i]);
            curr->next=temp;
            curr=curr->next;
        }*/
        return head2;
    }
};